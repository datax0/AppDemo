// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using System.Collections.Generic;
using System.Drawing;

namespace NiftyAppz.Proto
{
	public partial class MainUIViewController : UIViewController
	{
		private readonly IList<string> colors = new List<string>
		{
			"Blue",
			"Green",
			"Red",
			"Purple",
			"Yellow"
		};

		private string selectedColor;

		public MainUIViewController (IntPtr handle) : base (handle)
		{
		}

		public override void DidReceiveMemoryWarning ()
		{
			// Releases the view if it doesn't have a superview.
			base.DidReceiveMemoryWarning ();

			// Release any cached data, images, etc that aren't in use.
		}

		public override void ViewDidLoad ()
		{

			base.ViewDidLoad ();

			// Perform any additional setup after loading the view, typically from a nib.
			this.SetupPicker();

			//this.SignInButton.IconImage = Theme.Login;
			//this.SignUpButton.IconImage = Theme.Register;

			var b = new GlassButton (new RectangleF(20,250,280,50)) {
				Font = UIFont.BoldSystemFontOfSize (20),
				NormalColor = UIColor.Red,
				HighlightedColor = UIColor.Gray
			};
			b.SetTitle ("Send Money", UIControlState.Normal);
			View.AddSubview (b);

			//			var gradient = new CAGradientLayer();
			//			gradient.Colors = new MonoTouch.CoreGraphics.CGColor[]
			//			{
			//				UIColor.FromRGB (115, 181, 216).CGColor,
			//				UIColor.FromRGB (35, 101, 136).CGColor
			//			};
			//			gradient.Locations = new NSNumber[]
			//			{
			//					.5f,
			//					1f
			//				};
			//
			//			gradient.Frame = View.Layer.Bounds;
			//			View.Layer.AddSublayer(gradient);
			// Perform any additional setup after loading the view, typically from a nib.


		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
		}

		public override void ViewDidDisappear (bool animated)
		{
			base.ViewDidDisappear (animated);
		}


		private void SetupPicker()
		{
			// Setup the picker and model
			PickerModel model = new PickerModel(this.colors);
			model.PickerChanged += (sender, e) => {
				this.selectedColor = e.SelectedValue;
			};

			UIPickerView picker = new UIPickerView();
			picker.ShowSelectionIndicator = true;
			picker.Model = model;

			// Setup the toolbar
			UIToolbar toolbar = new UIToolbar();
			toolbar.BarStyle = UIBarStyle.Black;
			toolbar.Translucent = true;
			toolbar.SizeToFit();

			// Create a 'done' button for the toolbar and add it to the toolbar
			UIBarButtonItem doneButton = new UIBarButtonItem("Done", UIBarButtonItemStyle.Done,
				(s, e) => {
					this.PCurrency.Text = selectedColor;
					this.PCurrency.ResignFirstResponder();
				});
			toolbar.SetItems(new UIBarButtonItem[]{doneButton}, true);

			// Tell the textbox to use the picker for input
			this.PCurrency.InputView = picker;

			// Display the toolbar over the pickers
			this.PCurrency.InputAccessoryView = toolbar;
		}
	}
}
